{"version":3,"sources":["components/customerTransactionsTable/customerTransactionsTable.js","components/customersFilter/CustomersFilter.js","components/utils/calculateRewards.js","components/userRewardsSummary/userRewardsSummary.js","components/transactionsList/transactionsList.js","App.js","serviceWorker.js","index.js"],"names":["CustomerTransactionsTable","props","rows","data","classes","makeStyles","paper","width","container","maxHeight","headerBg","backgroundColor","color","useStyles","useState","page","setPage","rowsPerPage","setRowsPerPage","headers","headerItems","length","key","push","id","label","format","value","formatDate","align","date","activityDate","Date","getMonth","getDate","getFullYear","Paper","className","TableContainer","Table","stickyHeader","TableHead","TableRow","map","col","index","TableCell","TableBody","slice","tableRow","tabIndex","TablePagination","rowsPerPageOptions","component","count","onChangePage","e","newpage","onChangeRowsPerPage","target","CustomersFilter","ComboBox","style","padding","Autocomplete","options","selectedItem","onChange","event","newValue","getOptionLabel","option","renderInput","params","TextField","variant","monthNames","calculateRewardsByMonthInCurrentYear","transactions","month","filter","activity","reduce","accumulator","currentValue","activityAmount","rewardsAbove100","rewardsAbove50","calculateRewardsForEachActivity","UserRewardsSummary","currentMonth","currentMonthRewards","transactionData","previousMonthRewards","rewardsEarnedTwoMonthsAgo","rewards_summary","summary_type","margin","display","justifyContent","alignContent","type","fontWeight","paddingRight","type_rewards","initialTransactionData","selectedCustomer","name","reducer","state","action","payload","Error","TransactionList","useReducer","dispatch","hasError","setError","noUserSelected","useEffect","a","fetch","response","json","console","log","fetchTransactionList","getSelectedUserActivity","selectedCustomerName","customerName","error","customersList","uniqBy","forEach","customer","getUniqCustomerNames","selectedUser","getTransactionsTableProps","userRewardsSummary","theme","title","flexGrow","App","Container","AppBar","position","Typography","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5da1f9a4.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\n\nconst CustomerTransactionsTable = (props) => {\n    const rows = props.data;\n    const useStyles = makeStyles({\n        paper: {\n            width: '100%',\n        },\n        container: {\n            maxHeight: 350,\n        },\n        headerBg: {\n            backgroundColor: 'black',\n            color: 'white'\n        }\n    });\n    const classes = useStyles();\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n\n    const headers = () => {\n        const headerItems = [];\n        if(rows.length >= 1) {\n            for(const key in rows[0]) {\n                headerItems.push({\n                    id: key,\n                    label: key,\n                    format: (value) => key === 'date' ? formatDate(value) : value,\n                    align: 'left'\n                })\n            }\n        }\n\n        return headerItems;\n    };\n\n    const formatDate = (date) => {\n        const activityDate = new Date(date);\n\n        return activityDate.getMonth() + '/' + activityDate.getDate() + '/' + activityDate.getFullYear();\n    };\n\n    const handlePageChange = (e, newpage) => {\n       setPage(newpage);\n    };\n\n    const onChangeRowsPerPage = (e) => {\n        setRowsPerPage(e.target.value);\n        setPage(0);\n    };\n\n    return (\n        <>\n            <Paper className={classes.paper}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow className={classes.headerBg}>\n                            {headers().map((col, index) => (\n                                <TableCell key={index}>\n                                    {col.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((tableRow) => {\n                            return (\n                                <TableRow tabIndex={-1} key={tableRow.id}>\n                                    {headers().map((col, index) => {\n                                        const value = tableRow[col.label];\n                                        return (\n                                            <TableCell key={index} align={col.align}>\n                                                {col.format && typeof value === 'string' ? col.format(value) : value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 15]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handlePageChange}\n                onChangeRowsPerPage={onChangeRowsPerPage}\n            />\n        </Paper>\n        </>\n\n    );\n};\n\n// naming the transactions as data to make the component more independent\nCustomerTransactionsTable.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            customerName: PropTypes.string,\n            id: PropTypes.number,\n            date: PropTypes.string,\n            amount: PropTypes.number,\n            category: PropTypes.string\n        })\n    ).isRequired\n};\n\nexport default CustomerTransactionsTable;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport PropTypes from 'prop-types';\n\nconst CustomersFilter = (props) => {\n    const filterStyle = {\n        padding: 20\n    };\n\n    const ComboBox = (\n        <div style={filterStyle}>\n            <Autocomplete\n                options={props.data}\n                value={props.selectedItem}\n                onChange={(event, newValue) => {\n                    props.onChange(newValue);\n                }}\n                getOptionLabel={(option) => option[props.label]}\n                style={{ width: 300 }}\n                renderInput={(params) => <TextField {...params} label=\"Search User\" variant=\"outlined\" />}\n            />\n        </div>\n    )\n    return <div>\n        {ComboBox}\n    </div>\n}\n\nCustomersFilter.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            customerName: PropTypes.string,\n            id: PropTypes.number,\n            date: PropTypes.string,\n            amount: PropTypes.number,\n            category: PropTypes.string\n        })\n    ).isRequired,\n    onChange: PropTypes.func,\n    selectedItem: PropTypes.object,\n    label: PropTypes.string\n};\nexport default CustomersFilter;\n","export const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n];\n\nexport const calculateRewardsForEachActivity = (activityAmount) => {\n    let rewardsAbove100 = 0;\n    let rewardsAbove50 = 0;\n\n    if (activityAmount / 50 === 1) {\n        rewardsAbove50 = activityAmount - 50;\n    } else if (activityAmount / 50 > 1) {\n        rewardsAbove50 = 1 * 50;\n        rewardsAbove100 = 2 * (activityAmount - 100);\n    }\n    return rewardsAbove100 + rewardsAbove50;\n};\n\n// Assuming the activities are with last 3 months\n\nexport const calculateRewardsByMonthInCurrentYear = (transactions, month) => {\n    const activityInAGivenMonth = transactions.filter(activity => {\n        return new Date(activity.date).getMonth() === month;\n    });\n\n   return activityInAGivenMonth.reduce((accumulator, currentValue) => accumulator + calculateRewardsForEachActivity(currentValue['amount']), 0);\n}\n","import React from 'react';\nimport { monthNames, calculateRewardsByMonthInCurrentYear} from '../utils/calculateRewards';\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst UserRewardsSummary = (props) => {\n    const currentMonth = new Date().getMonth();\n    const currentMonthRewards = calculateRewardsByMonthInCurrentYear(props.transactionData, currentMonth);\n    const previousMonthRewards = calculateRewardsByMonthInCurrentYear(props.transactionData, currentMonth - 1);\n    const rewardsEarnedTwoMonthsAgo = calculateRewardsByMonthInCurrentYear(props.transactionData, currentMonth - 2);\n\n    const useStyles = makeStyles({\n        rewards_summary: {\n            width: '100%',\n            padding: 20\n        },\n        summary_type: {\n            margin: 15,\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignContent: 'center'\n        },\n        type: {\n            fontWeight: 300,\n            paddingRight: 20\n        },\n        type_rewards: {\n            fontWeight: 500\n        }\n    });\n    const classes = useStyles();\n    return (\n        <div className={classes.rewards_summary}>\n            <h2> Selected User Rewards Summary</h2>\n            <div className={classes.summary_type}>\n                <div className={classes.type}>Rewards Earned in Current Months</div>\n                <div className={classes.type_rewards}>{currentMonthRewards}</div>\n            </div>\n\n            <div className={classes.summary_type}>\n                <div className={classes.type}>Rewards Earned in Previous Month</div>\n                <div className={classes.type_rewards}>{previousMonthRewards}</div>\n            </div>\n\n            <div className={classes.summary_type}>\n                <div className={classes.type}>{'Rewards Earned in ' + monthNames[(currentMonth - 2)] + 'Month'} </div>\n                <div className={classes.type_rewards}>{calculateRewardsByMonthInCurrentYear(props.transactionData, currentMonth - 2)}</div>\n            </div>\n\n            <hr />\n\n            <div className={classes.summary_type}>\n                <div className={classes.type}>Total Rewards Earned in last 3 Months </div>\n                <div className={classes.type_rewards}>{currentMonthRewards + previousMonthRewards + rewardsEarnedTwoMonthsAgo}</div>\n            </div>\n        </div>\n    )\n};\n\nUserRewardsSummary.propTypes = {\n    transactionData: PropTypes.arrayOf(\n        PropTypes.shape({\n            customerName: PropTypes.string,\n            id: PropTypes.number,\n            date: PropTypes.string,\n            amount: PropTypes.number,\n            category: PropTypes.string\n        })\n    ).isRequired\n};\n\nexport default UserRewardsSummary;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport CustomerTransactionsTable from \"../customerTransactionsTable/customerTransactionsTable\";\nimport CustomerFilter from '../customersFilter/CustomersFilter';\nimport uniqBy from 'lodash/uniqBy';\nimport UserRewardsSummary from \"../userRewardsSummary/userRewardsSummary\";\n\nconst initialTransactionData = {\n    selectedCustomer: {\n        name: ''\n    },\n    transactions: []\n}\n\n const reducer = (state,action) => {\n    switch (action.type) {\n        case 'select_customer':\n            return {...state, selectedCustomer: action.payload};\n        case 'add_data':\n            return {...state, transactions: action.payload};\n        case 'reset':\n            return {...state, selectedCustomer: null};\n        default:\n            throw new Error();\n    }\n}\n\nconst TransactionList = (props) => {\n\n    const [state, dispatch] = useReducer(reducer, initialTransactionData);\n    const [hasError, setError] = useState(false);\n    const noUserSelected = {\n        name: ''\n    }\n\n    useEffect(() => {\n        const fetchTransactionList = async () => {\n            try {\n                const response = await fetch('/transactionsData.json');\n                const transactionData = await response.json();\n                dispatch({type:'add_data', payload: transactionData.data})\n                console.log(transactionData.data);\n                if(hasError){\n                    setError(false);\n                }\n            } catch (e) {\n                setError(true);\n            }\n        };\n        fetchTransactionList();\n    }, [hasError]);\n\n    const getSelectedUserActivity = (selectedCustomerName) => {\n       return state.transactions.filter(activity => {\n            return activity.customerName === selectedCustomerName\n        });\n    }\n\n    const getTransactionsTableProps = () => {\n        const selectedCustomerName = state.selectedCustomer.name;\n        let filteredTransactions = [];\n\n        if (selectedCustomerName) {\n            filteredTransactions = getSelectedUserActivity(selectedCustomerName);\n        } else {\n            filteredTransactions = state.transactions;\n        }\n\n        return {\n            data: filteredTransactions\n        }\n    };\n\n    const getUniqCustomerNames = () => {\n        const customersList = [];\n        uniqBy(state.transactions, 'customerName').forEach(customer => {\n            customersList.push({\n                name: customer.customerName,\n            })\n        });\n\n        return customersList;\n    };\n\n    const handleFilterChange= (selectedUser) => {\n        const payload = selectedUser ? selectedUser : noUserSelected;\n         dispatch({type: 'select_customer', payload: payload});\n    };\n\n    const error = (hasError ? <div>Error Retreiving Transactions Data</div> : null);\n\n    const userRewardsSummary = () => {\n        const selectedUser = state.selectedCustomer.name;\n\n        return (\n            selectedUser ? <UserRewardsSummary transactionData={getSelectedUserActivity(selectedUser)}/> : null\n        )\n    };\n\n\n    return (\n        <>\n            {error}\n            <CustomerFilter\n                selectedItem={state.selectedCustomer}\n                data={getUniqCustomerNames()}\n                onChange={handleFilterChange}\n                label='name'\n            />\n            <CustomerTransactionsTable {...getTransactionsTableProps()}/>\n            {userRewardsSummary()}\n        </>\n    );\n};\n\nexport default TransactionList;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport TransactionList from './components/transactionsList/transactionsList';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        flexGrow: 1,\n        padding: 15,\n    },\n}));\n\nconst App = () => {\n    const classes = useStyles();\n\n    return (\n        <Container>\n            <AppBar position=\"static\">\n                <Typography variant=\"h4\" className={classes.title}>\n                    Customer Transactions & Rewards\n                </Typography>\n            </AppBar>\n            <TransactionList />\n        </Container>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* Commenting out strict mode as few Material UI componnets uses ReactDom.findDomNode which is not allowed in\n    strict Mode */\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}